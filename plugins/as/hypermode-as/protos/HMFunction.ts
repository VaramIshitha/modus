// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.4

import { Writer, Reader } from "as-proto/assembly";
import { HMParameter } from "./HMParameter";
import { HMType } from "./HMType";

export class HMFunction {
  static encode(message: HMFunction, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.resolver);

    writer.uint32(18);
    writer.string(message.name);

    const parameters = message.parameters;
    for (let i: i32 = 0; i < parameters.length; ++i) {
      writer.uint32(26);
      writer.fork();
      HMParameter.encode(parameters[i], writer);
      writer.ldelim();
    }

    writer.uint32(32);
    writer.int32(message.returnType);
  }

  static decode(reader: Reader, length: i32): HMFunction {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new HMFunction();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.resolver = reader.string();
          break;

        case 2:
          message.name = reader.string();
          break;

        case 3:
          message.parameters.push(HMParameter.decode(reader, reader.uint32()));
          break;

        case 4:
          message.returnType = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  resolver: string;
  name: string;
  parameters: Array<HMParameter>;
  returnType: HMType;

  constructor(
    resolver: string = "",
    name: string = "",
    parameters: Array<HMParameter> = [],
    returnType: HMType = 0
  ) {
    this.resolver = resolver;
    this.name = name;
    this.parameters = parameters;
    this.returnType = returnType;
  }
}
